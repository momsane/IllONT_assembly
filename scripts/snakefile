#command to symlink scratch: ln -s /scratch/mgarci14 ../../results/scratch
#wd=/work/FAC/FBM/DMF/pengel/general_data/syncom_ONT_seq/workflow/scripts
#workflow = scripts, envs, config
#data
#results
#logs
#benchmarks

config_file = "../config/metadata.tsv"
# Contains:
# - one column for sample,
# - one column with 1/0 to report if all the data is available,
# - one column with the type of adapter to trim
# - one column indicating if the samples passes the quality controls

# Import packages
import numpy as np
import pandas as pd

#Read config file
metadata = pd.read_table(config_file, sep='\t', header=0).set_index('sample', drop = False)

#List samples
# SAMPLES = metadata['sample'].tolist()
# SAMPLES = metadata.loc[metadata['Illumina_avail'] == 1, 'sample'].tolist()
SAMPLES = metadata.loc[(metadata['Illumina_avail'] == 1) & (metadata['include_downstream'] == 1), 'sample'].tolist()

# Put here the paths to the raw reads folders on the cluster
ILLUMINA_RAW = "../../data/raw_Illumina_reads"
ONT_RAW = "../../data/raw_ONT_reads"

rule all:
    input:
        # Illumina reads pre-processing
        "../../results/Illumina/check_integrity/integrity_files.txt",
        "../../results/Illumina/count_reads_bt/count_reads_bt.txt",
        "../../results/Illumina/fastqc_pretrim/all",
        "../../results/Illumina/fastqc_posttrim/all",
        # ONT reads pre-processing
        # "../../results/ONT/check_integrity/integrity_files.txt"
        expand("../../results/ONT/readstats_{stage}/readstats_{stage}_all.txt", stage = ["bf", "af"]),
        # Hybracter: assembly and polishing
        "../../results/hybracter/test",
        expand("../../results/hybracter/{sample}_hybracter", sample = SAMPLES),
        # Global stats
        "../../results/hybracter/hybracter_summary_all.tsv",
        "../../results/assembly/samples_assembly_stats.txt",
        expand("../../results/assembly/bandage/{sample}_assembly_graph.jpg", sample = SAMPLES),
        expand("../../results/final_assemblies/{sample}_assembly.fasta", sample = SAMPLES),
        "../../results/checkm",
        # Illumina mapping stats
        "../../results/Illumina_mapping/all_read_mapstats.txt"

# The pipeline assumes the reads from different lanes are already
# concatenated into a single file for both Illumina and ONT reads

############################ ILLUMINA reads processing ############################

# File names should be something like: {sample}_R1.fastq.gz

# First we QC the Illumina reads

## Check that all raw read files are complete
# Not needed if you could verify the md5sums

rule gzip_test_Illumina:
    input:
        R1 = ILLUMINA_RAW + "/{sample}_R1.fastq.gz",
        R2 = ILLUMINA_RAW + "/{sample}_R2.fastq.gz",
    output:
        "../../results/Illumina/check_integrity/samples/{sample}.txt"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "20m",
        mem_mb = 500
    shell:
        """
        if gzip -t {input.R1}; then
            echo {input.R1}": OK" > {output}
        else 
            echo {input.R1}": Inappropriate file type or format" > {output}
        fi
        if gzip -t {input.R2}; then
            echo {input.R2}": OK" >> {output}
        else 
            echo {input.R2}": Inappropriate file type or format" >> {output}
        fi
        """

# Incomplete/empty files are now printed to one file.
# Check the output of the following rule

rule check_integrity:
    input:
        expand("../../results/{platform}/check_integrity/samples/{sample}.txt", sample = SAMPLES, platform = "{platform}")
    output:
        "../../results/{platform}/check_integrity/integrity_files.txt"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "10m",
        mem_mb = 100
    shell:
        """
        echo {input} | xargs cat >> {output}
        """

# Count number of reads in each fastq file before trimming.

rule count_reads_bt:
    input:
        R1 = ILLUMINA_RAW + "/{sample}_R1.fastq.gz",
        R2 = ILLUMINA_RAW + "/{sample}_R2.fastq.gz",
    output:
        "../../results/Illumina/count_reads_bt/samples/count_reads_bt_{sample}.txt"
    params:
        tmp = "../../results/Illumina/count_reads_bt/samples/count_reads_bt_{sample}.temp.txt"
    conda:
        "../envs/seqkit-2.6.1.yaml"
    log:
        "../../logs/Illumina/count_reads_bt/samples/{sample}.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "1h",
        mem_mb = 2000
    shell:
        """ 
        seqkit stats -T -b -e {input.R1} > {params.tmp};
        seqkit stats -T -b -e {input.R2} >> {params.tmp};
        cat {params.tmp} | awk -v sample={wildcards.sample} 'NR == 2 {{print sample"\tR1\t"$0}}' > {output};
        cat {params.tmp} | awk -v sample={wildcards.sample} 'NR == 2 {{print sample"\tR2\t"$0}}' >> {output};
        rm {params.tmp}
        """

# Combining all the samples stats into one file 

rule combine_readcounts_bt:
    input:
        expand("../../results/Illumina/count_reads_bt/samples/count_reads_bt_{sample}.txt", sample = SAMPLES)
    output:
        "../../results/Illumina/count_reads_bt/count_reads_bt.txt"
    log:
        "../../logs/Illumina/count_reads_bt/combine_readcounts.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "30m",
        mem_mb = 1000
    shell:
        """
        echo -e "sample\tread\tfile\tformat\ttype\tnum_seqs\tsum_len\tmin_len\tavg_len\tmax_len" > {output};
        echo {input} | xargs cat >> {output}
        """

rule fastqc_bt:
    input:
        R1 = ILLUMINA_RAW + "/{sample}_R1.fastq.gz",
        R2 = ILLUMINA_RAW + "/{sample}_R2.fastq.gz",
    output:
        directory("../../results/Illumina/fastqc_pretrim/samples/{sample}")
    conda:
        "../envs/fastqc-0.11.8.yaml"
    log:
        "../../logs/Illumina/fastqc_pretrim/samples/{sample}.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "1h",
        mem_mb = 1000
    shell:
        """
        mkdir -p {output};
        fastqc -o {output} {input.R1} {input.R2}
        """

# Compile and visualize all fastqc reports together

rule multiqc_fastqc_bt:
    input:
        expand("../../results/Illumina/fastqc_pretrim/samples/{sample}", sample = SAMPLES)
    output:
        directory("../../results/Illumina/fastqc_pretrim/all")
    conda:
        "../envs/multiqc-1.6.yaml"
    params:
        ignore = ".zip"
    log:
        "../../logs/Illumina/fastqc_pretrim/multiqc.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "30m",
        mem_mb = 2000
    shell:
        "multiqc --interactive -f --ignore {params.ignore} -o {output} {input}"

# The metadata file is updated to indicate the adapter content and read length
# Then you need to upload the correct adapter sequence(s) to the data folder

### Trimming

def determine_adapters(wildcards):
    adapt=metadata.loc[metadata['sample'] == wildcards.sample, 'Illumina_adapter'].item()
    if (adapt=='NT'):
        return '../../data/adapters/Nextera_Transposase.fa'
    elif (adapt=='IU'):
        return '../../data/adapters/Illumina_Universal.fa'
    elif (adapt=='TS'):
        return '../../data/adapters/TruSeq.fa'

def determine_k(wildcards):
    adapt=metadata.loc[metadata['sample'] == wildcards.sample, 'Illumina_adapter'].item()
    if (adapt=='NT'):
        return 31 #maximum allowed by bbduk
    elif (adapt=='IU'):
        return 19
    elif (adapt=='TS'):
        return 31 

# hdist is set to 2 to allow for 2 mismatches in the adapter sequence
# which more stringent than the default of 1

rule bbduk_adapt:
    input:
        R1 = ILLUMINA_RAW + "/{sample}_R1.fastq.gz",
        R2 = ILLUMINA_RAW + "/{sample}_R2.fastq.gz",
    output:
        trim1 = "../../results/Illumina/trimmed_reads/{sample}_R1.trim.fastq.gz",
        trim2 = "../../results/Illumina/trimmed_reads/{sample}_R2.trim.fastq.gz"
    params:
        adapt = determine_adapters,
        k = determine_k,
        mink = 11,
        hdist = 2,
        hdist2 = 0,
        overlap = 12,
        minlen = 40,
        q = 26
    log:
        "../../logs/Illumina/read_trimming/{sample}_trimming"
    threads: 2
    conda:
        "../envs/bbmap-39.01.yaml"
    resources:
        account = "pengel_general_data",
        runtime = "1h",
        mem_mb = 2000
    shell:
        """
        bbduk.sh in={input.R1} in2={input.R2} out={output.trim1} out2={output.trim2} \
        ref={params.adapt} ktrim=r k={params.k} mink={params.mink} \
        hdist={params.hdist} hdist2={params.hdist2} \
        tpe=t tbo=t minoverlap={params.overlap} minlen={params.minlen} rcomp=f \
        qtrim=rl trimq={params.q}
        """

# Run fastqc after trimming

rule fastqc_pt:
    input:
        R1 = "../../results/Illumina/trimmed_reads/{sample}_R1.trim.fastq.gz",
        R2 = "../../results/Illumina/trimmed_reads/{sample}_R2.trim.fastq.gz"
    output:
        directory("../../results/Illumina/fastqc_posttrim/samples/{sample}")
    conda:
        "../envs/fastqc-0.11.8.yaml"
    log:
        "../../logs/Illumina/fastqc_posttrim/samples/{sample}.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "1h",
        mem_mb = 1000
    shell:
        """
        mkdir -p {output};
        fastqc -o {output} {input.R1} {input.R2}
        """

# Compile and visualize all fastqc reports together

rule multiqc_fastqc_pt:
    input:
        expand("../../results/Illumina/fastqc_posttrim/samples/{sample}", sample = SAMPLES)
    output:
        directory("../../results/Illumina/fastqc_posttrim/all")
    conda:
        "../envs/multiqc-1.6.yaml"
    params:
        ignore = ".zip"
    log:
        "../../logs/Illumina/fastqc_posttrim/multiqc.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "30m",
        mem_mb = 2000
    shell:
        "multiqc --interactive -f --ignore {params.ignore} -o {output} {input}"

############################ ONT reads processing ############################

# File names should be something like: {sample}.fastq.gz

# Check that files are intact
# Not needed if you could verify the md5sums

rule gzip_test_ONT:
    input:
        ONT_RAW + "/{sample}.fastq.gz"
    output:
        "../../results/ONT/check_integrity/samples/{sample}.txt"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "20m",
        mem_mb = 500
    shell:
        """
        if gzip -t {input}; then
            echo {input}": OK" > {output}
        else 
            echo {input}": Inappropriate file type or format" > {output}
        fi
        """

# Reuse rule check_integrity

### QC and trimming/filtering

# First we want to compute a few stats on the raw reads

rule readstats_bf:
    input:
        ONT_RAW + "/{sample}.fastq.gz"
    output:
        "../../results/ONT/readstats_bf/samples/readstats_bf_{sample}.txt"
    conda:
        "../envs/nanoq-0.10.0.yaml"
    log:
        "../../logs/ONT/readstats_bf/{sample}.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "1h",
        mem_mb = 2000
    shell:
        """ 
        nanoq -i {input} --json -s -vv > {output}
        """

# Combining all the read stats into one file: this rule parses all json outputs to turn
# them into a tabular format then combines them into one file

rule combine_readstats:
    input:
        expand("../../results/ONT/readstats_{stage}/samples/readstats_{stage}_{sample}.txt", sample = SAMPLES, stage = "{stage}")
    output:
        "../../results/ONT/readstats_{stage}/readstats_{stage}_all.txt"
    log:
        "../../logs/ONT/readstats_{stage}/all.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "30m",
        mem_mb = 1000
    run:
        import json
        import pandas as pd
        
        combined_df = pd.DataFrame()
        
        for input_file in input:
            sample_name = input_file.split('_')[-1].replace('.txt', '')
            
            with open(input_file, 'r') as f:
                data = json.load(f)
                data['sample'] = sample_name  # Add sample to the data
                df = pd.DataFrame.from_dict(pd.json_normalize(data), orient='columns')
                
                combined_df = pd.concat([combined_df, df], ignore_index=True)
        
        combined_df.set_index('sample', inplace=True)
        combined_df.to_csv(output[0], sep='\t', index=True)

# Then we filter the reads to remove short and low quality reads

rule read_filtering:
    input:
        ONT_RAW + "/{sample}.fastq.gz"
    output:
        "../../results/ONT/filtered_reads/{sample}_ONT_filtered.fastq.gz"
    params:
        min_readlen = 800,
        min_meanq = 10,
        length_weight = 10,
        target_bases = 400000000
    conda:
        "../envs/filtlong-0.2.1.yaml"
    log:
        "../../logs/ONT/filtlong/{sample}_filtlong.log"
    benchmark:
        "../../benchmarks/filtlong/{sample}_filtlong.benchmark"
    threads: 2
    resources:
        account = "pengel_general_data",
        runtime = "30m",
        mem_mb = 2000
    shell:
        """
        (filtlong --min_length {params.min_readlen} \
        --min_mean_q {params.min_meanq} \
        --length_weight {params.length_weight} \
        --target_bases {params.target_bases}  \
        {input} | gzip > {output})2> {log}
        """

# Recompute read stats after filtering

rule readstats_af:
    input:
        "../../results/ONT/filtered_reads/{sample}_ONT_filtered.fastq.gz"
    output:
        "../../results/ONT/readstats_af/samples/readstats_af_{sample}.txt"
    conda:
        "../envs/nanoq-0.10.0.yaml"
    log:
        "../../logs/ONT/readstats_af/{sample}.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        runtime = "1h",
        mem_mb = 2000
    shell:
        """ 
        nanoq -i {input} --json -s -vv > {output}
        """

# Combine all the read stats into one file: reuse rule combine_readstats

# ### Assembly

# rule ONT_assembly:
#     input:
#         "../../results/ONT/filtered_reads/{sample}_ONT_filtered.fastq.gz"
#     output:
#         directory("../../results/ONT/assembly/{sample}_assembly")
#     log:
#         "../../logs/ONT/assembly/{sample}_ONT_assembly.log"
#     benchmark:
#         "../../benchmarks/assembly/{sample}_ONT_assembly.benchmark"
#     conda:
#         "../envs/flye-2.9.5.yaml"
#     threads: 4
#     resources:
#         account = "pengel_general_data",
#         mem_mb = 12000,
#         runtime= "1h"
#     shell:
#         "flye --threads {threads} --iterations 5 --nano-raw {input} --out-dir {output}"

############################ Hybracter ############################

# Hybracter is a snakemake-based software that runs the flye assembly,
# polishing with long reads (medaka, two rounds)
# polishing with short reads (polypolish and pypolca, 1 round each)
# intermediate quality controls and comparisons between each polishing step

rule init_hybracter:
    input:
        expand("../../results/ONT/filtered_reads/{sample}_ONT_filtered.fastq.gz", sample = SAMPLES)
    output:
        install = directory("../../results/hybracter/installation"),
        test = directory("../../results/hybracter/test")
    log:
        "../../logs/hybracter/init.log"
    threads: 1
    conda:
        "../envs/hybracter-0.9.0.yaml"
    resources:
        account = "pengel_general_data",
        mem_mb = 1000,
        runtime= "2h"
    shell:
        """
        hybracter install -o {output.install};
        hybracter test-hybrid -o {output.test}
        """

def get_size(wildcards):
    size = metadata.loc[metadata['sample'] == wildcards.sample, 'estimated_genome_size'].item()
    return int(size)

rule hybracter:
    input:
        filtered_ont = "../../results/ONT/filtered_reads/{sample}_ONT_filtered.fastq.gz",
        R1 = "../../results/Illumina/trimmed_reads/{sample}_R1.trim.fastq.gz",
        R2 = "../../results/Illumina/trimmed_reads/{sample}_R2.trim.fastq.gz"
    output:
        fld = directory("../../results/hybracter/{sample}_hybracter"),
        summary = "../../results/hybracter/{sample}_hybracter/FINAL_OUTPUT/hybracter_summary.tsv"
    params:
        size = get_size
    benchmark:
        "../../benchmarks/hybracter/{sample}_hybracter.benchmark"
    log:
        "../../logs/hybracter/{sample}_hybracter.log"
    conda:
        "../envs/hybracter-0.9.0.yaml"
    threads: 1
    resources:
        account = "pengel_general_data",
        mem_mb = 8000,
        runtime= "5h"
    shell:
        """
        hybracter hybrid-single -l {input.filtered_ont} \
        -1 {input.R1} -2 {input.R2} \
        -s {wildcards.sample} -c {params.size} -o {output} \
        -t {threads} --skip_qc --logic best
        """

############################ Genomes QC ############################

# If some samples are of poor quality, hybracter will exit without producing an output
# so we need to update the /config/metadata.tsv file to exclude them from downstream analysis

# First we combine the hybracter summary outputs

rule hybracter_summary:
    input:
        fld = expand("../../results/hybracter/{sample}_hybracter", sample = SAMPLES),
        summaries = expand("../../results/hybracter/{sample}_hybracter/FINAL_OUTPUT/hybracter_summary.tsv", sample = SAMPLES)
    output:
        "../../results/hybracter/hybracter_summary_all.tsv"
    log:
        "../../logs/hybracter/summary_all.log"
    threads: 1
    resources:
        account = "pengel_general_data",
        mem_mb = 500,
        runtime= "5m"
    shell:
        """
        echo -e 'Sample\tComplete\tTotal_assembly_length\tNumber_of_contigs\tMost_accurate_polishing_round\tLongest_contig_length\tLongest_contig_coverage\tNumber_circular_plasmids' > {output};
        echo {input.summaries} | xargs tail -q -n +2 >> {output}
        """

# Then we combine the assembly stats from flye

rule flye_assembly_stats:
    input:
        fld = expand("../../results/hybracter/{sample}_hybracter", sample = SAMPLES),
        stats = expand("../../results/hybracter/{sample}_hybracter/supplementary_results/flye_individual_summaries/{sample}_assembly_info.txt", sample = SAMPLES)
    output:
        "../../results/assembly/samples_assembly_stats.txt"
    log:
        "../../logs/assembly/assembly_stats.log"
    params:
        tmp = "../../results/assembly/tmp.txt"
    threads: 1
    resources:
        account = "pengel_general_data",
        mem_mb = 500,
        runtime= "10m"
    shell:
        """
        echo -e 'file\tseq_name\tlength\tcoverage\tcircular\trepeat\tmult\ttelomere\talt_group\tgraph_path' > {params.tmp};
        for file in {input.stats}; do
        awk -v fname="$file" -F '\t' 'NR > 1 {{print fname"\t"$0}}' "$file" >> {params.tmp};
        done;
        sed '/#/ d' < {params.tmp} > {output};
        rm {params.tmp}
        """

# And visualize the assembly graph

rule bandage_assembly:
    input:
        fld = "../../results/hybracter/{sample}_hybracter",
        graph = "../../results/hybracter/{sample}_hybracter/processing/assemblies/{sample}/assembly_graph.gfa"
    output:
        "../../results/assembly/bandage/{sample}_assembly_graph.jpg"
    log:
        "../../logs/assembly/{sample}_assembly_graph.log"
    conda:
        "../envs/bandage-0.8.1.yaml"
    threads: 2
    resources:
        account = "pengel_general_data",
        mem_mb = 2000,
        runtime= "1h"
    shell:
        "Bandage image {input.graph} {output}"

# Rename contigs to have sample name, replace " " by "_"
# and put all complete assemblies in a single folder

def get_fasta(wildcards):
    if metadata.loc[metadata['sample'] == wildcards.sample, 'complete'].item() == 1:
        return "../../results/hybracter/{sample}_hybracter/FINAL_OUTPUT/complete/{sample}_final.fasta"
    else:
        return "../../results/hybracter/{sample}_hybracter/FINAL_OUTPUT/incomplete/{sample}_final.fasta"

rule final_assemblies:
    input:
        fld = "../../results/hybracter/{sample}_hybracter",
        fasta = get_fasta
    output:
        "../../results/final_assemblies/{sample}_assembly.fasta"
    params:
        fld = "../../results/final_assemblies"
    log:
        "../../logs/final_assemblies/{sample}_assembly.fasta"
    threads: 1
    resources:
        account = "pengel_general_data",
        mem_mb = 1000,
        runtime= "10m"
    shell:
        """
        mkdir -p {params.fld};
        sample={wildcards.sample};
        sed "s/>/>$sample /" {input.fasta} > {output};
        sed -i "s/ /_/g" {output}
        """

# Next we run checkM to assess the quality of the assemblies

rule checkm:
    input:
        expand("../../results/final_assemblies/{sample}_assembly.fasta", sample = SAMPLES),
    output:
        fld = directory("../../results/checkm"),
        rextended = "../../results/checkm/checkm_report_extended.txt"
    params:
        fld = "../../results/final_assemblies",
        extension = "fasta",
        tmpdir = "/scratch/mgarci14/checkm.tmp",
        tmprep = "../../results/checkm/checkm_report_simple.txt",
        lineage = "../../results/checkm/lineage.ms"
    log:
        "../../logs/checkm.log"
    conda:
        "../envs/checkm-1.2.2.yaml"
    threads: 2
    resources:
        account = "pengel_general_data",
        mem_mb = 100000,
        runtime = "1h"
    shell:
        """
        mkdir -p {params.tmpdir};
        checkm lineage_wf -f {params.tmprep} --tab_table -x {params.extension} \
        -t {threads} --tmpdir {params.tmpdir} {params.fld} {output.fld};
        checkm qa -o 2 -f {output.rextended} --tab_table --tmpdir {params.tmpdir} \
        -t {threads} {params.lineage} {output.fld};
        rm {params.tmprep};
        rm -rf {params.tmpdir}
        """

# TODO
# - plot mapping coverage
# - genome QC with quast?
# - GTDB-Tk
# - DRAM
# - Defense finder
# - barrnap
# - RGI

############################ Short reads mapping coverage ############################

# Map Illumina reads to assembly (hybracter does not provide the bam file)

rule map_Illumina:
    input:
        R1 = "../../results/Illumina/trimmed_reads/{sample}_R1.trim.fastq.gz",
        R2 = "../../results/Illumina/trimmed_reads/{sample}_R2.trim.fastq.gz",
        assembly = "../../results/final_assemblies/{sample}_assembly.fasta"
    output:
        bam = "../../results/Illumina_mapping/bams/{sample}_assembly_sorted.bam",
        reads = "../../results/Illumina_mapping/read_mapping/{sample}_read_mapping.txt",
        bases = "../../results/Illumina_mapping/per_base/{sample}_read_mapping_per_base.txt"
    log:
        "../../logs/Illumina_mapping/{sample}_bowtie2.log"
    benchmark:
        "../../benchmarks/Illumina_mapping/{sample}_bowtie2.benchmark"
    params:
        build = "../../results/Illumina_mapping/build/{sample}/{sample}"
    conda:
        "../envs/Illumina_mapping.yaml"
    threads: 12
    resources:
        account = "pengel_general_data",
        mem_mb = 16000,
        runtime = "3h"
    shell:
        """
        bowtie2-build --quiet {input.assembly} {params.build};
        bowtie2 -1 {input.R1} -2 {input.R2} -x {params.build} --threads {threads} \
        --local --very-sensitive-local | samtools sort -O BAM -o {output.bam};
        samtools index {output.bam};
        (samtools flagstat {output.bam} > {output.reads}) 2> {log};
        (samtools depth -a {output.bam} > {output.bases}) 2> {log}
        """

rule parse_ONT_assembly_mapping:
    input:
        reads = expand("../../results/Illumina_mapping/read_mapping/{sample}_read_mapping.txt", sample = SAMPLES),
        bases = expand("../../results/Illumina_mapping/per_base/{sample}_read_mapping_per_base.txt", sample = SAMPLES)
    output:
        all_reads = "../../results/Illumina_mapping/all_read_mapstats.txt",
        all_bases = "../../results/Illumina_mapping/all_bases_cov.txt"
    log:
        "../../logs/Illumina_mapping/summary_mapping.log"
    conda:
        "../envs/R-4.3.2.yaml"
    resources:
        account = "pengel_general_data",
        mem_mb = 6000,
        runtime= "30m"
    script:
        "./parse_ONTassembly.R"

############################ ANNOTATION ##########################################

# rule checkm_plots:
#     input:
#         dir_asmbl="../results/ONT_assembly/final_assemblies/",
#         dir_checkm="../results/ONT_assembly/checkm_QC/"
#     output:
#         dir=directory("../results/ONT_assembly/checkm_QC/checkm_plots/")
#     log:
#         "logs/annot_QC/checkm/plot_checkm.log"
#     threads: 8
#     conda:
#         "envs/checkm_env.yaml"
#     resources:
#         account = "pengel_beemicrophage",
#         mem_mb = 5000,
#         runtime= "01:00:00"
#     shell:
#         "checkm marker_plot {input.dir_checkm} {input.dir_asmbl} {output.dir} -x fasta --image_type svg; "
#         "checkm coding_plot {input.dir_checkm} {input.dir_asmbl} {output.dir} 0 -x fasta --image_type svg; "
#         "checkm gc_plot {input.dir_asmbl} {output.dir} 0 -x fasta --image_type svg"

# rule DRAM_annot:
#     input:
#         asmbl="../results/ONT_assembly/final_assemblies/{sample}_third_Pilon_Assembly.fasta",
#         checkm="../results/ONT_assembly/checkm_QC/checkm_QC_stats.txt",
#         config="../resources/dram_config/DRAM_config.txt"
#     output:
#         dir=directory("../results/genomes_anntations/{sample}_annot_genome")
#     log:
#         "logs/annot_QC/dram/{sample}_annotation.log"
#     threads: 10
#     # conda:
#     #     "envs/dram.yaml" TODO does not work fails at pfam step --> using cluster one
#     resources:
#         account = "pengel_beemicrophage",
#         mem_mb = 100000,
#         runtime= "01:00:00"
#     shell:
#         #"(DRAM-setup.py import_config --config_loc {input.config}) 2> {log}; " #useful only if using conda dram_env
#         "source /etc/profile.d/lmodstacks.sh; " #import modules for DRAM
#         "export PATH=/dcsrsoft/spack/external/dram/v1.2.4/bin:$PATH; "
#         "dcsrsoft use old; "
#         "module load gcc/9.3.0 python; "
#         "module load hmmer mmseqs2 prodigal infernal trnascan-se barrnap; "
#         "(DRAM.py annotate -i {input.asmbl} \
#          -o {output.dir} --min_contig_size 999 \
#          --threads {threads} --verbose \
#          --checkm_quality {input.checkm}) 2> {log}" #annotate genomes with DRAM

# rule DRAM_distill:
#     input:
#         dir="../results/genomes_anntations/{sample}_annot_genome"
#     output:
#         dir=directory("../results/genomes_anntations/{sample}_distill")
#     log:
#         "logs/annot_QC/dram/{sample}_distill.log"
#     threads: 10
#     # conda:
#     #     "envs/dram.yaml" TODO does not work fails at pfam step --> using cluster one
#     resources:
#         account = "pengel_beemicrophage",
#         mem_mb = 10000,
#         runtime= "01:00:00"
#     shell:
#         #"(DRAM-setup.py import_config --config_loc {input.config}) 2> {log}; " #useful only if using conda dram_env
#         "source /etc/profile.d/lmodstacks.sh; " #import modules for DRAM
#         "export PATH=/dcsrsoft/spack/external/dram/v1.2.4/bin:$PATH; "
#         "dcsrsoft use old; "
#         "module load gcc/9.3.0 python; "
#         "module load hmmer mmseqs2 prodigal infernal trnascan-se barrnap; "
#         "(DRAM.py distill -i {input.dir}/annotations.tsv -o {output} --trna_path {input.dir}/trnas.tsv --rrna_path {input.dir}/rrnas.tsv) 2> {log}"

# ###################################DEFENSE SYSTEMS ##########################################################################
# rule DF_launch:
#     input:
#         faa="../results/genomes_anntations/{sample}_annot_genome/genes.faa"
#     output:
#         directory("../results/AVD_output/DF_output/{sample}_DF_output")
#     conda:
#         "envs/DF_env.yaml"
#     threads: 10
#     log:
#         "logs/defense_systems/DF/{sample}_DF.log"
#     resources:
#         account = "pengel_beemicrophage",
#         mem_mb = 10000,
#         runtime= "00:30:00"
#     shell:
#         #"defense-finder update; " # run only the first time you launch this ule, Idk how to make it more elegant
#         "(defense-finder run {input.faa} --out-dir {output}) 2> {log}"
